#!/usr/bin/env bash
set -e

# Exit when Ctrl+C is pressed
trap "exit" SIGINT

DEFAULT_DESTINATION="pacman-venv"
VERSION="v0.0"

PACMAN_VENV_ROOT="${BASH_SOURCE[0]%/*/*}/lib/pacman-venv"
ACTIVATION_DIRECTORY="${PACMAN_VENV_ROOT}/activation"
SHIMS_DIRECTORY="${PACMAN_VENV_ROOT}/shims"

# Options affecting the virtual environment installation
CLEAR_DESTINATION=0
INTERACTIVE=0

# Import message helper functions
source "${PACMAN_VENV_ROOT}/output/messages.sh"

version() {
    echo "Pacman Virtual Environment ${VERSION}"
}

usage() {
    local cmd="${0##*/}"
    version
    echo
    echo "Usage:"
    echo "    ${cmd} [options]        Create a virtual environment with the default name"
    echo "    ${cmd} [options] [name] Create a virtual environment with the specified name"
    echo
    echo "Options:"
    echo "    --clear           Clear the destination directory before creating the virtual environment"
    echo "    -i, --interactive Ask for confirmation when installing the base virtual environment packages"
    echo "    -h, --help        Display this help and exit"
    echo "    -v, --version     Display information version and exit"
    echo
    echo "For more information, check out https://github.com/jdholtz/pacman-venv#readme"
}

# Ensure destination is valid. If the --clear option is passed in, remove the destination
handle_destination() {
    local destination="${1}"
    local full_dest="${2}"
    if [[ -d "${full_dest}" ]] || [[ -f "${full_dest}" ]]; then
        if [[ "${CLEAR_DESTINATION}" == 1 ]]; then
            info "Clearing '${destination}' before installing"
            info "${full_dest}"
            sudo rm -r "${full_dest}"
            info "'${destination}' successfully cleared"
        else
            error "Destination '${destination}' already exists!"
            exit 1
        fi
    fi
}

# Install pacman and its dependencies. The entire base system is not
# needed in the virtual environment as that will install packages not
# necessary for the virtual environment.
install_pacman() {
    local root_dir="${1}"
    local pacman_opts=()
    [[ "${INTERACTIVE}" != 1 ]] && pacman_opts+=("--noconfirm")
    sudo pacman --root "${root_dir}" -Sy pacman "${pacman_opts[@]}"
}

add_activation_script() {
    local destination="${1}"
    sudo cp "${ACTIVATION_DIRECTORY}/pacman-venv-activate.bash" "${destination}/bin/pacman-venv-activate"
}

# Add the necessary package manager executables to pass the --root argument to pacman
add_shims() {
    local destination="${1}"
    cp "${SHIMS_DIRECTORY}/pacman" "${destination}/.pacman-venv-pacman"
    cp "${SHIMS_DIRECTORY}/yay" "${destination}/.pacman-venv-yay"
}

# Add the .gitignore file so the virtual environment doesn't show up in git repositories
add_gitignore() {
    local destination="${1}"
    printf "# Created automatically by pacman-venv\n*\n" > "${destination}/.gitignore"
}

create() {
    local destination="${1}"
    # Set default for PWD to ensure rm -r / is never executed in handle_destination
    local full_dest="${PWD:?}/${destination}"
    handle_destination "${destination}" "${full_dest}"

    info "Creating pacman virtual environment in ${destination}"

    # Make the virtual environment directory and pacman
    # directory for pacman to install databases in.
    mkdir -p "${full_dest}/var/lib/pacman"

    info "Installing base environment"

    install_pacman "${full_dest}"

    add_activation_script "${full_dest}"
    add_shims "${full_dest}"
    add_gitignore "${full_dest}"

    info "Successfully created pacman virtual environment at ${destination}"
}

# Parse flags
while [[ ! "$#" == 0 ]]; do
    case "$1" in
        --clear)
            CLEAR_DESTINATION=1
            ;;
        --interactive | -i)
            INTERACTIVE=1
            ;;
        --help | -h)
            usage
            exit
            ;;
        --version | -v)
            version
            exit
            ;;
        -*)
            error "Invalid argument '${1}'"
            usage
            exit
            ;;
        *)
            destination="${1}"
            ;;
    esac
    shift
done

# Set the default if no destination is set. Also prevents inputs like "" to be set
# to destination.
destination="${destination:-${DEFAULT_DESTINATION}}"

create "${destination}"
